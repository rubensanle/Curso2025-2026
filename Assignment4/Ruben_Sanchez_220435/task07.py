# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/FacultadInformatica-LinkedData/Curso2025-2026/blob/master/Assignment4/course_materials/notebooks/Task07.ipynb

**Task 07: Querying RDF(s)**
"""

"""**//!pip install rdflib**"""
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

result = []
for s in g.subjects(RDF.type, RDFS.Class):
    superclass = None
    for o in g.objects(s, RDFS.subClassOf):
        superclass = o
    result.append((s, superclass))

for r in result:
    print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query = """
SELECT ?c ?sc WHERE {
  ?c a rdfs:Class .
  OPTIONAL { ?c rdfs:subClassOf ?sc. }
}
"""

for r in g.query(query):
    print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")
individuals = []

classes_to_check = {ns.Person}
checked_classes = set()

while classes_to_check:
    current = classes_to_check.pop()
    checked_classes.add(current)
    for subclass in g.subjects(RDFS.subClassOf, current):
        if subclass not in checked_classes:
            classes_to_check.add(subclass)

for cls in checked_classes:
    for ind in g.subjects(RDF.type, cls):
        individuals.append(ind)

for i in individuals:
    print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query = """
SELECT ?ind WHERE {
  ?ind a ?type .
  ?type rdfs:subClassOf* <http://oeg.fi.upm.es/def/people#Person> .
}
"""

for r in g.query(query):
    print(r.ind)

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query = """
SELECT DISTINCT ?name ?type WHERE {
  VALUES ?rocky { <http://oeg.fi.upm.es/def/people#Rocky> }
  ?s <http://oeg.fi.upm.es/def/people#knows> ?rocky .
  ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type .

  {
    ?s <http://oeg.fi.upm.es/def/people#hasName> ?name .
  }
  UNION
  {
    ?s <http://www.w3.org/2000/01/rdf-schema#label> ?name .
  }
}
"""

for r in g.query(query):
    print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
SELECT DISTINCT ?name WHERE {
  {
    ?persona <http://oeg.fi.upm.es/def/people#hasColleague> ?colega1 .
    ?colega1 <http://oeg.fi.upm.es/def/people#ownsPet> ?mascota1 .
    ?mascota1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://oeg.fi.upm.es/def/people#Animal> .
  }
  UNION
  {
    ?persona <http://oeg.fi.upm.es/def/people#hasColleague> ?colega2 .
    ?colega2 <http://oeg.fi.upm.es/def/people#hasColleague> ?colega3 .
    ?colega3 <http://oeg.fi.upm.es/def/people#ownsPet> ?mascota2 .
    ?mascota2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://oeg.fi.upm.es/def/people#Animal> .
  }

  {
    ?persona <http://oeg.fi.upm.es/def/people#hasName> ?name .
  }
  UNION
  {
    ?persona <http://www.w3.org/2000/01/rdf-schema#label> ?name .
    FILTER NOT EXISTS { ?persona <http://oeg.fi.upm.es/def/people#hasName> ?anyName }
  }
}
"""

for r in g.query(query):
    print(r.name)

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")